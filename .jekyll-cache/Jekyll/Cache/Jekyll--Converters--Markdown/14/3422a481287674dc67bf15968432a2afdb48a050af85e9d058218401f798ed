I"å-<p>En esta primera parte explico como llegu√© a conocer la tem√°tica de la creaci√≥n de palabras a partir de reglas gram√°ticas y c√≥mo se pueden utilizar en el desarrollo de videojuegos para la creaci√≥n ‚Äúinfinita‚Äù de nombres de personajes, lugares, etc.</p>

<!--more-->

<p class="h2 text-center" style="padding-top: 64px; padding-bottom: 64px;">
	Procedural Generation<br />
	para la creaci√≥n de niveles
</p>

<p class="h3 text-left">
	Primera parte ‚Äì Reglas Gram√°ticas para la creaci√≥n de palabras.
</p>

<p><br /></p>

<div class="well">
	<div class="row">
		<div class="col-xs-3">
			<img class="img-responsive img-thumbnail" src="/assets/posts/tutorial-procedural/imgs/1.png" />
		</div>
		<div class="col-xs-6">
			<img class="img-responsive img-thumbnail" src="/assets/posts/tutorial-procedural/imgs/2.png" />
		</div>
		<div class="col-xs-3">
			<img class="img-responsive img-thumbnail" src="/assets/posts/tutorial-procedural/imgs/3.png" />
		</div>
	</div>
</div>

<p class="text-justify">Hace unos a√±os me surgi√≥ la idea de escribir historias y relatos fant√°sticos. Escrib√≠ un par de cuentos cortos con personajes como magos, brujos, guerreros de tierras lejanas, etc. Pasado un tiempo me propuse juntar estos relatos bajo un solo universo. As√≠ naci√≥ ‚ÄúAnmer‚Äù, un continente con una historia muy rica y extensa, llena de bestias y personajes buenos y malos. Escrib√≠ la idea general para las diferentes √©pocas de ‚ÄúAnmer‚Äù (etapas temporales del continente en donde iban a encajar los relatos que ya hab√≠a escrito).</p>

<p><br /></p>
<p><strong class="text-warning">Pero, ¬øqu√© tiene que ver esto con la creaci√≥n de niveles usando algoritmos procedurales?</strong></p>
<p><br /></p>

<div class="row text-justify">
	<div class="col-sm-3 col-md-4">
		<div class="thumbnail">
			<img class="img-responsive img-thumbnail" src="/assets/posts/tutorial-procedural/imgs/3.1.png" />
		</div>
	</div>
	<div class="col-sm-9 col-md-8">
		<p>Bueno, como ven√≠a diciendo empec√© con la creaci√≥n de un universo que encapsulara todos los relatos. Para esto fue necesario dise√±ar (en mi cabeza) el concepto general de este mundo. Fui respondiendo a preguntas como: qu√© tama√±o tiene, qu√© tan antiguo es, qu√© personajes habitan all√≠, cu√°l es la historia general de esta tierra, etc. Ten√≠a mas o menos todo resuelto, pero hab√≠a algo que me picaba la curiosidad: ¬øqu√© <mark>lenguas</mark> hablaban en ‚ÄúAnmer‚Äù?<br />
		<br />
		Me vino a la mente la idea de Tolkien, que us√≥ sus propios lenguajes como marco para todas su obras. Las historias aparec√≠an despu√©s de la lengua, y no al rev√©s. Muchas veces inventaba las palabras para los nombres y lugares y luego a partir de su significado le descubr√≠a su lugar en la historia. Yo nunca hab√≠a inventado ning√∫n lenguaje, mucho menos sab√≠a como empezar a crear uno.<br />
		<br />
		Google! En internet existe material para todo, si sab√©s c√≥mo buscar.</p>

		<p>Investigu√© un tiempo sobre la creaci√≥n de lenguajes artificiales <mark>‚ÄúConlangs‚Äù</mark>. Aprend√≠ mucho sobre c√≥mo funcionan las lenguas en general y no solo mi propia lengua materna (espa√±ol). Cuando cre√≠ haber juntado un m√≠nimo de informaci√≥n sobre la creaci√≥n de los lenguajes artificiales me tir√© de lleno a la idea.<br /></p>
	</div>
</div>

<p><br /></p>

<div class="row text-justify">
	<div class="col-sm-9 col-md-8">
		<p>Primero cree una forma escrita para la lengua: un alfabeto de pocos s√≠mbolos que me serv√≠a para escribir en espa√±ol e ingl√©s (y con suerte tambi√©n en la lengua que quer√≠a crear). Comenc√© a experimentar con diferentes sonidos y cre√© un par de palabras, ajustando al mismo tiempo la pronunciaci√≥n y la forma escrita.<br /></p>
		<p>En ese momento se me ocurri√≥ la idea de <mark>automatizar</mark> la creaci√≥n de nuevas palabras, nombres y frases. Como me gusta programar pens√© que se pod√≠a hacer algo para obtener 1000 palabras con un solo click.</p>
		<p>Me encontr√© con que esto ya se hab√≠a hecho antes, y muchas veces. En internet hay docenas de sitios que permiten generar nombres aleatoriamente, entre ellos <a href="http://fantasynamegenerators.com/">http://fantasynamegenerators.com/</a> (generador de nombres f√°cil de usar), <a href="http://klh.karinoyo.com/generate/words/">http://klh.karinoyo.com/generate/words/</a> (generador de palabras utilizando reglas gramaticales)</p>

		<p> Investigando un poco m√°s me top√© con un sitio que explicaba como se realizaban estos generadores supuestamente ‚Äúaleatorios‚Äù de nombres.
		Prob√© varias formas para generar texto ‚Äúaleatorio‚Äù, entre ellas las <a href="https://es.wikipedia.org/wiki/Cadena_de_M%C3%A1rkov">Cadenas de Markov</a> fueron las m√°s interesantes. Pero lo que me termin√≥ interesando m√°s fue el concepto de gr√°maticas. 
		Este es un concepto muy parecido a lo que se utiliza en lenguajes de programaci√≥n para la verificaci√≥n de la sintaxis y sem√°ntica, aunque no lo sab√≠a en ese entonces.</p>
	</div>
	<div class="col-xs-3">
		<div class="thumbnail">
			<img class="img-responsive img-thumbnail" src="/assets/posts/tutorial-procedural/imgs/3.2.png" />
		</div>
	</div>
	<div class="col-xs-3">
		<div class="thumbnail">
			<img class="img-responsive img-thumbnail" src="/assets/posts/tutorial-procedural/imgs/3.3.png" />
		</div>
	</div>
</div>

<p><br /></p>

<p class="h2">Gram√°ticas</p>

<p>La idea es crear las palabras o el texto de acuerdo a un conjunto predeterminado de reglas. Las palabras son el resultado de la combinaci√≥n de estas reglas. Por ejemplo, para generar un nombre corto podr√≠amos tener estas reglas:</p>

<div class="well">
	<code>[NOMBRE]</code> = [C][V][C][V][C]<br />
	<code>[C]</code> = v | c | d | r | t <br />
	<code>[V]</code> = a | e | i | o <br />
</div>

<p>En este esquema tenemos 3 reglas: regla principal (<code>NOMBRE</code>), consonantes (<code>C</code>) y vocales (<code>V</code>)</p>
<p>
	<ul>
		<li>La regla <code>NOMBRE</code> est√° definida en funci√≥n de otras reglas de tipo <code>C</code> y <code>V</code>.</li>
		<li>Las reglas <code>C</code> y <code>V</code> no utilizan otras reglas, pero tienen asignados todos los posibles valores que podr√≠an tomar, en este caso <code>C</code> solo podr√≠a ser una de las letras: v, c, d, r, t; y <code>V</code> puede tomar valores: a, e, i, o. El valor que toma <code>C</code> y <code>V</code> se decide aleatoriamente de acuerdo a los posibles valores.</li>
	</ul>
	<span class="text-muted">Notar que el s√≠mbolo | (pipe) se utiliza para representar una alternativa entre las diferentes opciones.</span>
</p>

<p>
	Para generar un nuevo nombre entonces utilizamos este esquema simple con nuestras tres reglas:
	<ul style="list-style-type: decimal;">
		<li>Primero se elige una regla para comenzar (en nuestro caso es la regla <code>NOMBRE</code>) y se eval√∫a y resuelve recursivamente.</li>
		<li>Evaluamos el primer elemento de la regla <code>NOMBRE</code> , que es <code>[C]</code>. <br />
			C es tambi√©n es una regla, por lo tanto la resolvemos. Sabemos que <code>C</code> solo puede tomar uno de los valores indicados (v, c, d, r, t) as√≠ que elegimos uno al azar: este es el primer car√°cter de nuestro nombre.</li>
		<li>Si seguimos as√≠ con los dem√°s elementos de la regla <code>NOMBRE</code> completamos toda la palabra.</li>
	</ul>
	<p>Posibles resoluciones para la regla NOMBRE: ‚ÄúRoder‚Äù, ‚ÄúDarod‚Äù, ‚ÄúVader‚Äù, etc.</p>
</p>

<p><br /></p>

<p>Este es un ejemplo muy simple, pero la generaci√≥n de palabras utilizando esta t√©cnica puede hacerse mucho m√°s compleja y con resultados mucho m√°s interesantes ampliando la cantidad de reglas, combinando diferentes reglas entre s√≠ o incluso jugando con la probabilidad para la toma de los valores finales.</p>

<p>Podr√≠amos tener un nombre m√°s complejo utilizando otro esquema de reglas:</p>
<div class="well">
	<code>[NOMBRE]</code> = [C | V] [V] [C][FIN] <br />
	<code>[FIN]</code> = [FIN-MUJER] | [FIN-HOMBRE (2)] <br />
	<code>[FIN-MUJER]</code> = al | ia | ela <br />
	<code>[FIN-HOMBRE]</code> = oir | al | il <br />
	<code>[C]</code> = r | l | t | d | m | s <br />
	<code>[V]</code> = a | i | y | hu | o <br />
</div>
<p>Posibles nombres generados a partir de este esquema: ‚ÄúRaloir‚Äù, ‚ÄúDytela‚Äù, ‚ÄúHuilia‚Äù, etc.</p>
<p class="text-muted">Notar que en este caso el primer elemento del nombre puede ser una consonante o una vocal. Adem√°s agregamos una terminaci√≥n para diferenciar entre nombres masculinos y femeninos.<br />
Existe adem√°s doble chance de que la terminaci√≥n sea para un hombre.</p>

<p><br /></p>

<div class="row">
	<div class="col-xs-12">
		<img class="img-responsive img-thumbnail center-block" src="/assets/posts/tutorial-procedural/imgs/4.png" />
	</div>
</div>

<p><br /></p>

<p>Todo esto es muy lindo y tiene miles de usos para la generaci√≥n de nombres de personajes y lugares, pero ¬øc√≥mo lo implementamos? Despu√©s de todo si queremos utilizarlo en nuestro juego vamos a necesitar informatizarlo de alg√∫n modo.</p>

<p>En mi caso realic√© un programa en <mark>Java</mark> que me permitiera utilizar estas reglas. <br />
Los esquemas de reglas estaban escritos dentro de archivos de texto. Estos archivos los cargaba en mi programa: utilizando <a href="https://en.wikipedia.org/wiki/Regular_expression">expresiones regulares</a> se identificaban las reglas y los operandos. Luego se evaluaban las reglas N cantidad de veces para obtener la lista de palabras finales.</p>

<p>Esto funcion√≥ extremadamente bien, pero por desgracia las palabras generadas por el programa no me terminaron de convencer como para incluirlas en mi lenguaje.</p>

<p><strong>Pero para incluirlas en mi videojuego no estaban nada mal!</strong> Ahora pod√≠a tener un personaje diferente en cada partida y los mapas presentaban nombres diferentes para cada jugador. Utilizando esta t√©cnica junto con otras m√°s se puede conseguir un nivel de aleatoridad que le da mucha rejugabilidad a nuestro juego.</p>

<p><br /></p>

<div class="row">
	<div class="col-xs-4"><img class="img-responsive img-thumbnail center-block" src="/assets/posts/tutorial-procedural/imgs/5.png" /></div>
	<div class="col-xs-4"><img class="img-responsive img-thumbnail center-block" src="/assets/posts/tutorial-procedural/imgs/8.png" /></div>
	<div class="col-xs-4"><img class="img-responsive img-thumbnail center-block" src="/assets/posts/tutorial-procedural/imgs/7.png" /></div>
</div>
<div class="row">
	<div class="col-xs-6"><img class="img-responsive img-thumbnail center-block" src="/assets/posts/tutorial-procedural/imgs/6.png" /></div>
	<div class="col-xs-6"><img class="img-responsive img-thumbnail center-block" src="/assets/posts/tutorial-procedural/imgs/9.png" /></div>
</div>

<p><br /></p>

<p>Bueno esto fue todo por ahora. Si quieren probar el generador de nombres que hice en Java pueden hacer <a href="http://fede0d.github.io/assets/posts/tutorial-procedural/NameGeneration.zip">clic aqu√≠</a> para descargar el proyecto.
Pueden probar todas las t√©cnicas que us√© para generar nombres, desde cadenas de Markov hasta Reglas Gram√°ticas.</p>

<p>En la segunda parte explicar√© como aplicar este concepto de gram√°ticas para generar no solo palabras sino cualquier tipo de contenido dentro de nuestro juego.
Adem√°s pondremos a prueba todo esto implementando un generador de niveles dentro del motor Godot Engine.</p>

<div class="row">
	<div class="col-xs-4"></div>
	<div class="col-xs-4"><img class="img-responsive center-block" src="/assets/posts/tutorial-procedural/imgs/10.png" /></div>
	<div class="col-xs-4"></div>
</div>

<p><br /></p>

<p>Saludos, y hasta la pr√≥xima.</p>

<p><br /></p>
:ET